
STM32G-io-expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab0  08002ab0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab0  08002ab0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab0  08002ab0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002ac4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002ac4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009015  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb0  00000000  00000000  00029049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c84  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b654  00000000  00000000  0003f97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000796f6  00000000  00000000  0004afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c46c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c94  00000000  00000000  000c4718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002a58 	.word	0x08002a58

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002a58 	.word	0x08002a58

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <I2C_Slave_isr>:
    0x00, // Configuration port 0
    0x00  // Configuration port 1
};
uint8_t i2c_state = 0;

HAL_StatusTypeDef I2C_Slave_isr(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
  if (hi2c->Instance->ISR & (I2C_ISR_ADDR)) {
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	2208      	movs	r2, #8
 800022c:	4013      	ands	r3, r2
 800022e:	d003      	beq.n	8000238 <I2C_Slave_isr+0x20>
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2208      	movs	r2, #8
 8000236:	61da      	str	r2, [r3, #28]
  }

  if (hi2c->Instance->ISR & (I2C_ISR_RXNE)) {
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	2204      	movs	r2, #4
 8000240:	4013      	ands	r3, r2
 8000242:	d01e      	beq.n	8000282 <I2C_Slave_isr+0x6a>
    uint8_t data = hi2c->Instance->RXDR;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800024a:	2117      	movs	r1, #23
 800024c:	187b      	adds	r3, r7, r1
 800024e:	701a      	strb	r2, [r3, #0]
    if (i2c_state == 0) {
 8000250:	4b35      	ldr	r3, [pc, #212]	; (8000328 <I2C_Slave_isr+0x110>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d107      	bne.n	8000268 <I2C_Slave_isr+0x50>
      reg_offset = data;
 8000258:	4b34      	ldr	r3, [pc, #208]	; (800032c <I2C_Slave_isr+0x114>)
 800025a:	187a      	adds	r2, r7, r1
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	701a      	strb	r2, [r3, #0]
      i2c_state = 1;
 8000260:	4b31      	ldr	r3, [pc, #196]	; (8000328 <I2C_Slave_isr+0x110>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e00c      	b.n	8000282 <I2C_Slave_isr+0x6a>
    } else {
      reg_data[reg_offset++] = hi2c->Instance->RXDR;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800026e:	4b2f      	ldr	r3, [pc, #188]	; (800032c <I2C_Slave_isr+0x114>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	b2d0      	uxtb	r0, r2
 8000276:	4a2d      	ldr	r2, [pc, #180]	; (800032c <I2C_Slave_isr+0x114>)
 8000278:	7010      	strb	r0, [r2, #0]
 800027a:	001a      	movs	r2, r3
 800027c:	b2c9      	uxtb	r1, r1
 800027e:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <I2C_Slave_isr+0x118>)
 8000280:	5499      	strb	r1, [r3, r2]
    }
  }

  if (hi2c->Instance->ISR & (I2C_ISR_TXIS)) {
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	2202      	movs	r2, #2
 800028a:	4013      	ands	r3, r2
 800028c:	d00c      	beq.n	80002a8 <I2C_Slave_isr+0x90>
    hi2c->Instance->TXDR = reg_data[reg_offset++];
 800028e:	4b27      	ldr	r3, [pc, #156]	; (800032c <I2C_Slave_isr+0x114>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	b2d1      	uxtb	r1, r2
 8000296:	4a25      	ldr	r2, [pc, #148]	; (800032c <I2C_Slave_isr+0x114>)
 8000298:	7011      	strb	r1, [r2, #0]
 800029a:	001a      	movs	r2, r3
 800029c:	4b24      	ldr	r3, [pc, #144]	; (8000330 <I2C_Slave_isr+0x118>)
 800029e:	5c9b      	ldrb	r3, [r3, r2]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if (reg_offset >= sizeof(reg_data)) {
 80002a8:	4b20      	ldr	r3, [pc, #128]	; (800032c <I2C_Slave_isr+0x114>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b07      	cmp	r3, #7
 80002ae:	d902      	bls.n	80002b6 <I2C_Slave_isr+0x9e>
    reg_offset = 0;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <I2C_Slave_isr+0x114>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
  }

  // ---------
  GPIOA->ODR = (GPIOA->ODR & 0xFF00) | reg_data[2];
 80002b6:	23a0      	movs	r3, #160	; 0xa0
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	23ff      	movs	r3, #255	; 0xff
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	401a      	ands	r2, r3
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <I2C_Slave_isr+0x118>)
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	0019      	movs	r1, r3
 80002ca:	23a0      	movs	r3, #160	; 0xa0
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	430a      	orrs	r2, r1
 80002d0:	615a      	str	r2, [r3, #20]
  GPIOB->ODR = (GPIOB->ODR & 0xFF00) | reg_data[3];
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <I2C_Slave_isr+0x11c>)
 80002d4:	695a      	ldr	r2, [r3, #20]
 80002d6:	23ff      	movs	r3, #255	; 0xff
 80002d8:	021b      	lsls	r3, r3, #8
 80002da:	401a      	ands	r2, r3
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <I2C_Slave_isr+0x118>)
 80002de:	78db      	ldrb	r3, [r3, #3]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	0019      	movs	r1, r3
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <I2C_Slave_isr+0x11c>)
 80002e6:	430a      	orrs	r2, r1
 80002e8:	615a      	str	r2, [r3, #20]
  // ---------

  if (hi2c->Instance->ISR & (I2C_ISR_STOPF)) {
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	2220      	movs	r2, #32
 80002f2:	4013      	ands	r3, r2
 80002f4:	d012      	beq.n	800031c <I2C_Slave_isr+0x104>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2220      	movs	r2, #32
 80002fc:	61da      	str	r2, [r3, #28]

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2208      	movs	r2, #8
 8000304:	61da      	str	r2, [r3, #28]

    // flush the transmit data register I2C_TXDR
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	699a      	ldr	r2, [r3, #24]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2101      	movs	r1, #1
 8000312:	430a      	orrs	r2, r1
 8000314:	619a      	str	r2, [r3, #24]

    i2c_state = 0;
 8000316:	4b04      	ldr	r3, [pc, #16]	; (8000328 <I2C_Slave_isr+0x110>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
  }

  return HAL_OK;
 800031c:	2300      	movs	r3, #0
}
 800031e:	0018      	movs	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	b006      	add	sp, #24
 8000324:	bd80      	pop	{r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	20000098 	.word	0x20000098
 800032c:	2000008c 	.word	0x2000008c
 8000330:	20000090 	.word	0x20000090
 8000334:	50000400 	.word	0x50000400

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033c:	f000 fa50 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000340:	f000 f84a 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000344:	f000 f902 	bl	800054c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000348:	f000 f8a0 	bl	800048c <MX_I2C1_Init>
  MX_IWDG_Init();
 800034c:	f000 f8de 	bl	800050c <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000350:	f000 f88e 	bl	8000470 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // ====|| I2C Slave setup with interrupt ||====

  /* Enable Address Acknowledge */
  hi2c1.Instance->CR2 &= ~I2C_CR2_NACK;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <main+0x88>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	685a      	ldr	r2, [r3, #4]
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <main+0x88>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4919      	ldr	r1, [pc, #100]	; (80003c4 <main+0x8c>)
 8000360:	400a      	ands	r2, r1
 8000362:	605a      	str	r2, [r3, #4]

  // Set isr function
  hi2c1.XferISR = I2C_Slave_isr;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0x88>)
 8000366:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <main+0x90>)
 8000368:	635a      	str	r2, [r3, #52]	; 0x34

  // Enable I2C interrup
  __HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_TXI | I2C_IT_RXI);
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <main+0x88>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <main+0x88>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	212e      	movs	r1, #46	; 0x2e
 8000376:	430a      	orrs	r2, r1
 8000378:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIOA->ODR = (GPIOA->ODR & 0xFF00) | reg_data[2];
 800037a:	23a0      	movs	r3, #160	; 0xa0
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	23ff      	movs	r3, #255	; 0xff
 8000382:	021b      	lsls	r3, r3, #8
 8000384:	401a      	ands	r2, r3
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <main+0x94>)
 8000388:	789b      	ldrb	r3, [r3, #2]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	0019      	movs	r1, r3
 800038e:	23a0      	movs	r3, #160	; 0xa0
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	430a      	orrs	r2, r1
 8000394:	615a      	str	r2, [r3, #20]
    GPIOB->ODR = (GPIOB->ODR & 0xFF00) | reg_data[3];
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <main+0x98>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	23ff      	movs	r3, #255	; 0xff
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	401a      	ands	r2, r3
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <main+0x94>)
 80003a2:	78db      	ldrb	r3, [r3, #3]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	0019      	movs	r1, r3
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <main+0x98>)
 80003aa:	430a      	orrs	r2, r1
 80003ac:	615a      	str	r2, [r3, #20]
    HAL_IWDG_Refresh(&hiwdg);
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0x9c>)
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fd15 	bl	8001de0 <HAL_IWDG_Refresh>
    HAL_Delay(10);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f000 fa98 	bl	80008ec <HAL_Delay>
    GPIOA->ODR = (GPIOA->ODR & 0xFF00) | reg_data[2];
 80003bc:	e7dd      	b.n	800037a <main+0x42>
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	20000028 	.word	0x20000028
 80003c4:	ffff7fff 	.word	0xffff7fff
 80003c8:	08000219 	.word	0x08000219
 80003cc:	20000090 	.word	0x20000090
 80003d0:	50000400 	.word	0x50000400
 80003d4:	2000007c 	.word	0x2000007c

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b093      	sub	sp, #76	; 0x4c
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	2414      	movs	r4, #20
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0018      	movs	r0, r3
 80003e4:	2334      	movs	r3, #52	; 0x34
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f002 fb2d 	bl	8002a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	0018      	movs	r0, r3
 80003f2:	2310      	movs	r3, #16
 80003f4:	001a      	movs	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f002 fb26 	bl	8002a48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fcfd 	bl	8001e00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	220a      	movs	r2, #10
 800040a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	0052      	lsls	r2, r2, #1
 8000412:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000414:	0021      	movs	r1, r4
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2240      	movs	r2, #64	; 0x40
 8000420:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2201      	movs	r2, #1
 8000426:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	187b      	adds	r3, r7, r1
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fd25 	bl	8001e80 <HAL_RCC_OscConfig>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800043a:	f000 f8e5 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2207      	movs	r2, #7
 8000442:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2100      	movs	r1, #0
 800045a:	0018      	movs	r0, r3
 800045c:	f002 f820 	bl	80024a0 <HAL_RCC_ClockConfig>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000464:	f000 f8d0 	bl	8000608 <Error_Handler>
  }
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b013      	add	sp, #76	; 0x4c
 800046e:	bd90      	pop	{r4, r7, pc}

08000470 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* I2C1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2017      	movs	r0, #23
 800047a:	f000 fb07 	bl	8000a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800047e:	2017      	movs	r0, #23
 8000480:	f000 fb19 	bl	8000ab6 <HAL_NVIC_EnableIRQ>
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_I2C1_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <MX_I2C1_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_I2C1_Init+0x74>)
 8000498:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <MX_I2C1_Init+0x7c>)
 800049a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <MX_I2C1_Init+0x74>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_I2C1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_I2C1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_I2C1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_I2C1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_I2C1_Init+0x74>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fd09 	bl	8000ee0 <HAL_I2C_Init>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d2:	f000 f899 	bl	8000608 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_I2C1_Init+0x74>)
 80004d8:	2100      	movs	r1, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fb96 	bl	8001c0c <HAL_I2CEx_ConfigAnalogFilter>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e4:	f000 f890 	bl	8000608 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <MX_I2C1_Init+0x74>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 fbd9 	bl	8001ca4 <HAL_I2CEx_ConfigDigitalFilter>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f887 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000028 	.word	0x20000028
 8000504:	40005400 	.word	0x40005400
 8000508:	00303d5b 	.word	0x00303d5b

0800050c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_IWDG_Init+0x34>)
 8000512:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <MX_IWDG_Init+0x38>)
 8000514:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MX_IWDG_Init+0x34>)
 8000518:	2201      	movs	r2, #1
 800051a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_IWDG_Init+0x34>)
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <MX_IWDG_Init+0x3c>)
 8000520:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 399;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_IWDG_Init+0x34>)
 8000524:	2290      	movs	r2, #144	; 0x90
 8000526:	32ff      	adds	r2, #255	; 0xff
 8000528:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_IWDG_Init+0x34>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc05 	bl	8001d3c <HAL_IWDG_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_IWDG_Init+0x2e>
  {
    Error_Handler();
 8000536:	f000 f867 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000007c 	.word	0x2000007c
 8000544:	40003000 	.word	0x40003000
 8000548:	00000fff 	.word	0x00000fff

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 fa73 	bl	8002a48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_GPIO_Init+0xb4>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000580:	2102      	movs	r1, #2
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_GPIO_Init+0xb4>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058a:	2202      	movs	r2, #2
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F1_Pin|F2_Pin|F3_Pin|F4_Pin
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2200      	movs	r2, #0
 8000598:	21ff      	movs	r1, #255	; 0xff
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fc82 	bl	8000ea4 <HAL_GPIO_WritePin>
                          |F5_Pin|F6_Pin|F7_Pin|F8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|HEATER_Pin|LIGHT_Pin|GPIO_PIN_3
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_GPIO_Init+0xb8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	21ff      	movs	r1, #255	; 0xff
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fc7c 	bl	8000ea4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|NET_Pin|RS485_SEL1_Pin|RS485_SEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : F1_Pin F2_Pin F3_Pin F4_Pin
                           F5_Pin F6_Pin F7_Pin F8_Pin */
  GPIO_InitStruct.Pin = F1_Pin|F2_Pin|F3_Pin|F4_Pin
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	22ff      	movs	r2, #255	; 0xff
 80005b0:	601a      	str	r2, [r3, #0]
                          |F5_Pin|F6_Pin|F7_Pin|F8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	193a      	adds	r2, r7, r4
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fb05 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin HEATER_Pin LIGHT_Pin PB3
                           PB4 NET_Pin RS485_SEL1_Pin RS485_SEL0_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|HEATER_Pin|LIGHT_Pin|GPIO_PIN_3
 80005d2:	0021      	movs	r1, r4
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	22ff      	movs	r2, #255	; 0xff
 80005d8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|NET_Pin|RS485_SEL1_Pin|RS485_SEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2201      	movs	r2, #1
 80005de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <MX_GPIO_Init+0xb8>)
 80005f0:	0019      	movs	r1, r3
 80005f2:	0010      	movs	r0, r2
 80005f4:	f000 faf2 	bl	8000bdc <HAL_GPIO_Init>

}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b009      	add	sp, #36	; 0x24
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	50000400 	.word	0x50000400

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x44>)
 800061c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_MspInit+0x44>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	641a      	str	r2, [r3, #64]	; 0x40
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x44>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x44>)
 8000634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_MspInit+0x44>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0549      	lsls	r1, r1, #21
 800063c:	430a      	orrs	r2, r1
 800063e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_MspInit+0x44>)
 8000642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b091      	sub	sp, #68	; 0x44
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	232c      	movs	r3, #44	; 0x2c
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 f9ea 	bl	8002a48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	2414      	movs	r4, #20
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0018      	movs	r0, r3
 800067a:	2318      	movs	r3, #24
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 f9e2 	bl	8002a48 <memset>
  if(hi2c->Instance==I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a23      	ldr	r2, [pc, #140]	; (8000718 <HAL_I2C_MspInit+0xbc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d13f      	bne.n	800070e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2220      	movs	r2, #32
 8000692:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	f002 f889 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006a6:	f7ff ffaf 	bl	8000608 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <HAL_I2C_MspInit+0xc0>)
 80006ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_I2C_MspInit+0xc0>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_I2C_MspInit+0xc0>)
 80006b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c2:	212c      	movs	r1, #44	; 0x2c
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	22c0      	movs	r2, #192	; 0xc0
 80006c8:	00d2      	lsls	r2, r2, #3
 80006ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2212      	movs	r2, #18
 80006d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2206      	movs	r2, #6
 80006e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	187a      	adds	r2, r7, r1
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fa75 	bl	8000bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_I2C_MspInit+0xc0>)
 80006f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_I2C_MspInit+0xc0>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0389      	lsls	r1, r1, #14
 80006fc:	430a      	orrs	r2, r1
 80006fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_I2C_MspInit+0xc0>)
 8000702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	039b      	lsls	r3, r3, #14
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b011      	add	sp, #68	; 0x44
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40005400 	.word	0x40005400
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8b6 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <I2C1_IRQHandler+0x2c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	23e0      	movs	r3, #224	; 0xe0
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	4013      	ands	r3, r2
 8000760:	d004      	beq.n	800076c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <I2C1_IRQHandler+0x2c>)
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fc6b 	bl	8001040 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800076a:	e003      	b.n	8000774 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <I2C1_IRQHandler+0x2c>)
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fc4c 	bl	800100c <HAL_I2C_EV_IRQHandler>
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	20000028 	.word	0x20000028

08000780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000790:	f7ff fff6 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	; (80007cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <LoopForever+0xe>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	; (80007d8 <LoopForever+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ba:	f002 f921 	bl	8002a00 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007be:	f7ff fdbb 	bl	8000338 <main>

080007c2 <LoopForever>:

LoopForever:
  b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   r0, =_estack
 80007c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d0:	08002ab8 	.word	0x08002ab8
  ldr r2, =_sbss
 80007d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d8:	200000a0 	.word	0x200000a0

080007dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_Init+0x3c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_Init+0x3c>)
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	0049      	lsls	r1, r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fa:	2003      	movs	r0, #3
 80007fc:	f000 f810 	bl	8000820 <HAL_InitTick>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d003      	beq.n	800080c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e001      	b.n	8000810 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800080c:	f7ff ff02 	bl	8000614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	230f      	movs	r3, #15
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <HAL_InitTick+0x88>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d02b      	beq.n	8000890 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_InitTick+0x8c>)
 800083a:	681c      	ldr	r4, [r3, #0]
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_InitTick+0x88>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0019      	movs	r1, r3
 8000842:	23fa      	movs	r3, #250	; 0xfa
 8000844:	0098      	lsls	r0, r3, #2
 8000846:	f7ff fc5b 	bl	8000100 <__udivsi3>
 800084a:	0003      	movs	r3, r0
 800084c:	0019      	movs	r1, r3
 800084e:	0020      	movs	r0, r4
 8000850:	f7ff fc56 	bl	8000100 <__udivsi3>
 8000854:	0003      	movs	r3, r0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f93d 	bl	8000ad6 <HAL_SYSTICK_Config>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d112      	bne.n	8000886 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b03      	cmp	r3, #3
 8000864:	d80a      	bhi.n	800087c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	2301      	movs	r3, #1
 800086a:	425b      	negs	r3, r3
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f000 f90c 	bl	8000a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_InitTick+0x90>)
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	e00d      	b.n	8000898 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800087c:	230f      	movs	r3, #15
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	e008      	b.n	8000898 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000886:	230f      	movs	r3, #15
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e003      	b.n	8000898 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000898:	230f      	movs	r3, #15
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	781b      	ldrb	r3, [r3, #0]
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b005      	add	sp, #20
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000004 	.word	0x20000004

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	001a      	movs	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	18d2      	adds	r2, r2, r3
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_IncTick+0x20>)
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000008 	.word	0x20000008
 80008d4:	2000009c 	.word	0x2000009c

080008d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTick+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	2000009c 	.word	0x2000009c

080008ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f4:	f7ff fff0 	bl	80008d8 <HAL_GetTick>
 80008f8:	0003      	movs	r3, r0
 80008fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	d005      	beq.n	8000912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_Delay+0x44>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	001a      	movs	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	189b      	adds	r3, r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	f7ff ffe0 	bl	80008d8 <HAL_GetTick>
 8000918:	0002      	movs	r2, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	d8f7      	bhi.n	8000914 <HAL_Delay+0x28>
  {
  }
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000008 	.word	0x20000008

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	0002      	movs	r2, r0
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b7f      	cmp	r3, #127	; 0x7f
 8000946:	d809      	bhi.n	800095c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	231f      	movs	r3, #31
 8000950:	401a      	ands	r2, r3
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_EnableIRQ+0x30>)
 8000954:	2101      	movs	r1, #1
 8000956:	4091      	lsls	r1, r2
 8000958:	000a      	movs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	0002      	movs	r2, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b7f      	cmp	r3, #127	; 0x7f
 800097c:	d828      	bhi.n	80009d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <__NVIC_SetPriority+0xd4>)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	33c0      	adds	r3, #192	; 0xc0
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	589b      	ldr	r3, [r3, r2]
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	0011      	movs	r1, r2
 8000994:	2203      	movs	r2, #3
 8000996:	400a      	ands	r2, r1
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	21ff      	movs	r1, #255	; 0xff
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	401a      	ands	r2, r3
 80009a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	401a      	ands	r2, r3
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	2303      	movs	r3, #3
 80009b6:	4003      	ands	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	481f      	ldr	r0, [pc, #124]	; (8000a3c <__NVIC_SetPriority+0xd4>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	430a      	orrs	r2, r1
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ce:	e031      	b.n	8000a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0019      	movs	r1, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	400b      	ands	r3, r1
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3306      	adds	r3, #6
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	3304      	adds	r3, #4
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <__NVIC_SetPriority+0xd8>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	001c      	movs	r4, r3
 8000a20:	230f      	movs	r3, #15
 8000a22:	4023      	ands	r3, r4
 8000a24:	3b08      	subs	r3, #8
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	3306      	adds	r3, #6
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	18c3      	adds	r3, r0, r3
 8000a30:	3304      	adds	r3, #4
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	045b      	lsls	r3, r3, #17
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d301      	bcc.n	8000a5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e010      	b.n	8000a7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SysTick_Config+0x44>)
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	3a01      	subs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a64:	2301      	movs	r3, #1
 8000a66:	425b      	negs	r3, r3
 8000a68:	2103      	movs	r1, #3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff ff7c 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x44>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	210f      	movs	r1, #15
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	1c02      	adds	r2, r0, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	0002      	movs	r2, r0
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff33 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ffaf 	bl	8000a44 <SysTick_Config>
 8000ae6:	0003      	movs	r3, r0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000af8:	210f      	movs	r1, #15
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2225      	movs	r2, #37	; 0x25
 8000b04:	5c9b      	ldrb	r3, [r3, r2]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d006      	beq.n	8000b1a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e049      	b.n	8000bae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	210e      	movs	r1, #14
 8000b26:	438a      	bics	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2101      	movs	r1, #1
 8000b36:	438a      	bics	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	491d      	ldr	r1, [pc, #116]	; (8000bbc <HAL_DMA_Abort_IT+0xcc>)
 8000b46:	400a      	ands	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_DMA_Abort_IT+0xd0>)
 8000b4c:	6859      	ldr	r1, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	221c      	movs	r2, #28
 8000b54:	4013      	ands	r3, r2
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_DMA_Abort_IT+0xd0>)
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000b68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00c      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b7c:	490f      	ldr	r1, [pc, #60]	; (8000bbc <HAL_DMA_Abort_IT+0xcc>)
 8000b7e:	400a      	ands	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000b8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2225      	movs	r2, #37	; 0x25
 8000b90:	2101      	movs	r1, #1
 8000b92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d004      	beq.n	8000bae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	0010      	movs	r0, r2
 8000bac:	4798      	blx	r3
    }
  }
  return status;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	781b      	ldrb	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b004      	add	sp, #16
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	fffffeff 	.word	0xfffffeff
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2225      	movs	r2, #37	; 0x25
 8000bd0:	5c9b      	ldrb	r3, [r3, r2]
 8000bd2:	b2db      	uxtb	r3, r3
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e147      	b.n	8000e7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0x28>
 8000c02:	e138      	b.n	8000e76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <HAL_GPIO_Init+0x40>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	2201      	movs	r2, #1
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d017      	beq.n	8000cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d123      	bne.n	8000d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	58d3      	ldr	r3, [r2, r3]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	4013      	ands	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	6939      	ldr	r1, [r7, #16]
 8000d0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	23c0      	movs	r3, #192	; 0xc0
 8000d48:	029b      	lsls	r3, r3, #10
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d100      	bne.n	8000d50 <HAL_GPIO_Init+0x174>
 8000d4e:	e092      	b.n	8000e76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d50:	4a50      	ldr	r2, [pc, #320]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3318      	adds	r3, #24
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	589b      	ldr	r3, [r3, r2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	220f      	movs	r2, #15
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1ca>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a45      	ldr	r2, [pc, #276]	; (8000e98 <HAL_GPIO_Init+0x2bc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1c6>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <HAL_GPIO_Init+0x2c0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1c2>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <HAL_GPIO_Init+0x2c4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1be>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e004      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000da6:	2300      	movs	r3, #0
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	2103      	movs	r1, #3
 8000dac:	400a      	ands	r2, r1
 8000dae:	00d2      	lsls	r2, r2, #3
 8000db0:	4093      	lsls	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000db8:	4936      	ldr	r1, [pc, #216]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	035b      	lsls	r3, r3, #13
 8000dde:	4013      	ands	r3, r2
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43da      	mvns	r2, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	039b      	lsls	r3, r3, #14
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e1c:	2384      	movs	r3, #132	; 0x84
 8000e1e:	58d3      	ldr	r3, [r2, r3]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e42:	2284      	movs	r2, #132	; 0x84
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	58d3      	ldr	r3, [r2, r3]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	025b      	lsls	r3, r3, #9
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e6e:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e13      	subs	r3, r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_GPIO_Init+0x2ae>
 8000e88:	e6b0      	b.n	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021800 	.word	0x40021800
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	50000800 	.word	0x50000800
 8000ea0:	50000c00 	.word	0x50000c00

08000ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	0008      	movs	r0, r1
 8000eae:	0011      	movs	r1, r2
 8000eb0:	1cbb      	adds	r3, r7, #2
 8000eb2:	1c02      	adds	r2, r0, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
 8000eb6:	1c7b      	adds	r3, r7, #1
 8000eb8:	1c0a      	adds	r2, r1, #0
 8000eba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ebc:	1c7b      	adds	r3, r7, #1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec4:	1cbb      	adds	r3, r7, #2
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ece:	1cbb      	adds	r3, r7, #2
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e082      	b.n	8000ff8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2241      	movs	r2, #65	; 0x41
 8000ef6:	5c9b      	ldrb	r3, [r3, r2]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d107      	bne.n	8000f0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fba7 	bl	800065c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2241      	movs	r2, #65	; 0x41
 8000f12:	2124      	movs	r1, #36	; 0x24
 8000f14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4934      	ldr	r1, [pc, #208]	; (8001000 <HAL_I2C_Init+0x120>)
 8000f30:	400a      	ands	r2, r1
 8000f32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4931      	ldr	r1, [pc, #196]	; (8001004 <HAL_I2C_Init+0x124>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0209      	lsls	r1, r1, #8
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e007      	b.n	8000f6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2184      	movs	r1, #132	; 0x84
 8000f68:	0209      	lsls	r1, r1, #8
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d104      	bne.n	8000f80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	491f      	ldr	r1, [pc, #124]	; (8001008 <HAL_I2C_Init+0x128>)
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	491a      	ldr	r1, [pc, #104]	; (8001004 <HAL_I2C_Init+0x124>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69d9      	ldr	r1, [r3, #28]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2241      	movs	r2, #65	; 0x41
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2242      	movs	r2, #66	; 0x42
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	f0ffffff 	.word	0xf0ffffff
 8001004:	ffff7fff 	.word	0xffff7fff
 8001008:	02008000 	.word	0x02008000

0800100c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	4798      	blx	r3
  }
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b004      	add	sp, #16
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	001a      	movs	r2, r3
 800105e:	2301      	movs	r3, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d010      	beq.n	8001086 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	09db      	lsrs	r3, r3, #7
 8001068:	001a      	movs	r2, r3
 800106a:	2301      	movs	r3, #1
 800106c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800106e:	d00a      	beq.n	8001086 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	2201      	movs	r2, #1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	0052      	lsls	r2, r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	0a9b      	lsrs	r3, r3, #10
 800108a:	001a      	movs	r2, r3
 800108c:	2301      	movs	r3, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d010      	beq.n	80010b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	09db      	lsrs	r3, r3, #7
 8001096:	001a      	movs	r2, r3
 8001098:	2301      	movs	r3, #1
 800109a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800109c:	d00a      	beq.n	80010b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	2208      	movs	r2, #8
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	0a5b      	lsrs	r3, r3, #9
 80010b8:	001a      	movs	r2, r3
 80010ba:	2301      	movs	r3, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	d010      	beq.n	80010e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	09db      	lsrs	r3, r3, #7
 80010c4:	001a      	movs	r2, r3
 80010c6:	2301      	movs	r3, #1
 80010c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80010ca:	d00a      	beq.n	80010e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	2202      	movs	r2, #2
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	220b      	movs	r2, #11
 80010ec:	4013      	ands	r3, r2
 80010ee:	d005      	beq.n	80010fc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fbd8 	bl	80018ac <I2C_ITError>
  }
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b006      	add	sp, #24
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	0008      	movs	r0, r1
 800112e:	0011      	movs	r1, r2
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	1c02      	adds	r2, r0, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	003b      	movs	r3, r7
 8001138:	1c0a      	adds	r2, r1, #0
 800113a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	5c9b      	ldrb	r3, [r3, r2]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <I2C_Slave_ISR_IT+0x24>
 8001194:	2302      	movs	r3, #2
 8001196:	e0fa      	b.n	800138e <I2C_Slave_ISR_IT+0x21a>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2240      	movs	r2, #64	; 0x40
 800119c:	2101      	movs	r1, #1
 800119e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	001a      	movs	r2, r3
 80011a6:	2301      	movs	r3, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	d00b      	beq.n	80011c4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	001a      	movs	r2, r3
 80011b2:	2301      	movs	r3, #1
 80011b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80011b6:	d005      	beq.n	80011c4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f9f6 	bl	80015b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	001a      	movs	r2, r3
 80011ca:	2301      	movs	r3, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	d054      	beq.n	800127a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	001a      	movs	r2, r3
 80011d6:	2301      	movs	r3, #1
 80011d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80011da:	d04e      	beq.n	800127a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d12d      	bne.n	8001242 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2241      	movs	r2, #65	; 0x41
 80011ea:	5c9b      	ldrb	r3, [r3, r2]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b28      	cmp	r3, #40	; 0x28
 80011f0:	d10b      	bne.n	800120a <I2C_Slave_ISR_IT+0x96>
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	049b      	lsls	r3, r3, #18
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d106      	bne.n	800120a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	0011      	movs	r1, r2
 8001202:	0018      	movs	r0, r3
 8001204:	f000 faf8 	bl	80017f8 <I2C_ITListenCplt>
 8001208:	e036      	b.n	8001278 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2241      	movs	r2, #65	; 0x41
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b29      	cmp	r3, #41	; 0x29
 8001214:	d110      	bne.n	8001238 <I2C_Slave_ISR_IT+0xc4>
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4a5f      	ldr	r2, [pc, #380]	; (8001398 <I2C_Slave_ISR_IT+0x224>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00c      	beq.n	8001238 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fc4a 	bl	8001ac2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	0018      	movs	r0, r3
 8001232:	f000 f957 	bl	80014e4 <I2C_ITSlaveSeqCplt>
 8001236:	e01f      	b.n	8001278 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2210      	movs	r2, #16
 800123e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001240:	e09d      	b.n	800137e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2210      	movs	r2, #16
 8001248:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	2204      	movs	r2, #4
 8001250:	431a      	orrs	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <I2C_Slave_ISR_IT+0xf4>
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	045b      	lsls	r3, r3, #17
 8001262:	429a      	cmp	r2, r3
 8001264:	d000      	beq.n	8001268 <I2C_Slave_ISR_IT+0xf4>
 8001266:	e08a      	b.n	800137e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f000 fb1b 	bl	80018ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001276:	e082      	b.n	800137e <I2C_Slave_ISR_IT+0x20a>
 8001278:	e081      	b.n	800137e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	001a      	movs	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	4013      	ands	r3, r2
 8001284:	d031      	beq.n	80012ea <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	001a      	movs	r2, r3
 800128c:	2301      	movs	r3, #1
 800128e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001290:	d02b      	beq.n	80012ea <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001296:	b29b      	uxth	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d018      	beq.n	80012ce <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d154      	bne.n	8001382 <I2C_Slave_ISR_IT+0x20e>
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <I2C_Slave_ISR_IT+0x224>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d050      	beq.n	8001382 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8fe 	bl	80014e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80012e8:	e04b      	b.n	8001382 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	001a      	movs	r2, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	d00c      	beq.n	8001310 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	001a      	movs	r2, r3
 80012fc:	2301      	movs	r3, #1
 80012fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001300:	d006      	beq.n	8001310 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	0011      	movs	r1, r2
 8001308:	0018      	movs	r0, r3
 800130a:	f000 f847 	bl	800139c <I2C_ITAddrCplt>
 800130e:	e039      	b.n	8001384 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	001a      	movs	r2, r3
 8001316:	2301      	movs	r3, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d033      	beq.n	8001384 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	001a      	movs	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001326:	d02d      	beq.n	8001384 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132c:	b29b      	uxth	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d018      	beq.n	8001364 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	3b01      	subs	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
 8001362:	e00f      	b.n	8001384 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	045b      	lsls	r3, r3, #17
 800136a:	429a      	cmp	r2, r3
 800136c:	d002      	beq.n	8001374 <I2C_Slave_ISR_IT+0x200>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	0018      	movs	r0, r3
 8001378:	f000 f8b4 	bl	80014e4 <I2C_ITSlaveSeqCplt>
 800137c:	e002      	b.n	8001384 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	e000      	b.n	8001384 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001382:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	2100      	movs	r1, #0
 800138a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b006      	add	sp, #24
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	ffff0000 	.word	0xffff0000

0800139c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800139c:	b5b0      	push	{r4, r5, r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2241      	movs	r2, #65	; 0x41
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	001a      	movs	r2, r3
 80013b0:	2328      	movs	r3, #40	; 0x28
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b28      	cmp	r3, #40	; 0x28
 80013b6:	d000      	beq.n	80013ba <I2C_ITAddrCplt+0x1e>
 80013b8:	e088      	b.n	80014cc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	250f      	movs	r5, #15
 80013c6:	197b      	adds	r3, r7, r5
 80013c8:	2101      	movs	r1, #1
 80013ca:	400a      	ands	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	200c      	movs	r0, #12
 80013da:	183b      	adds	r3, r7, r0
 80013dc:	21fe      	movs	r1, #254	; 0xfe
 80013de:	400a      	ands	r2, r1
 80013e0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	240a      	movs	r4, #10
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	0592      	lsls	r2, r2, #22
 80013f0:	0d92      	lsrs	r2, r2, #22
 80013f2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	2308      	movs	r3, #8
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	21fe      	movs	r1, #254	; 0xfe
 8001402:	400a      	ands	r2, r1
 8001404:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d148      	bne.n	80014a0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800140e:	0021      	movs	r1, r4
 8001410:	187b      	adds	r3, r7, r1
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	09db      	lsrs	r3, r3, #7
 8001416:	b29a      	uxth	r2, r3
 8001418:	183b      	adds	r3, r7, r0
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4053      	eors	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	001a      	movs	r2, r3
 8001422:	2306      	movs	r3, #6
 8001424:	4013      	ands	r3, r2
 8001426:	d120      	bne.n	800146a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001428:	183b      	adds	r3, r7, r0
 800142a:	187a      	adds	r2, r7, r1
 800142c:	8812      	ldrh	r2, [r2, #0]
 800142e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	2b02      	cmp	r3, #2
 8001440:	d14c      	bne.n	80014dc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2208      	movs	r2, #8
 800144e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2240      	movs	r2, #64	; 0x40
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001458:	183b      	adds	r3, r7, r0
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	197b      	adds	r3, r7, r5
 800145e:	7819      	ldrb	r1, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fe5e 	bl	8001124 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001468:	e038      	b.n	80014dc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800146a:	240c      	movs	r4, #12
 800146c:	193b      	adds	r3, r7, r4
 800146e:	2208      	movs	r2, #8
 8001470:	18ba      	adds	r2, r7, r2
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f000 fb60 	bl	8001b44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	2100      	movs	r1, #0
 800148a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800148c:	193b      	adds	r3, r7, r4
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fe43 	bl	8001124 <HAL_I2C_AddrCallback>
}
 800149e:	e01d      	b.n	80014dc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	021a      	lsls	r2, r3, #8
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fb4b 	bl	8001b44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80014b6:	230c      	movs	r3, #12
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	881a      	ldrh	r2, [r3, #0]
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	7819      	ldrb	r1, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fe2d 	bl	8001124 <HAL_I2C_AddrCallback>
}
 80014ca:	e007      	b.n	80014dc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2208      	movs	r2, #8
 80014d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b004      	add	sp, #16
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}

080014e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2242      	movs	r2, #66	; 0x42
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	0b9b      	lsrs	r3, r3, #14
 8001500:	001a      	movs	r2, r3
 8001502:	2301      	movs	r3, #1
 8001504:	4013      	ands	r3, r2
 8001506:	d008      	beq.n	800151a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <I2C_ITSlaveSeqCplt+0xc4>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e00d      	b.n	8001536 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	0bdb      	lsrs	r3, r3, #15
 800151e:	001a      	movs	r2, r3
 8001520:	2301      	movs	r3, #1
 8001522:	4013      	ands	r3, r2
 8001524:	d007      	beq.n	8001536 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	491e      	ldr	r1, [pc, #120]	; (80015ac <I2C_ITSlaveSeqCplt+0xc8>)
 8001532:	400a      	ands	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2241      	movs	r2, #65	; 0x41
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b29      	cmp	r3, #41	; 0x29
 8001540:	d114      	bne.n	800156c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2241      	movs	r2, #65	; 0x41
 8001546:	2128      	movs	r1, #40	; 0x28
 8001548:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2221      	movs	r2, #33	; 0x21
 800154e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2101      	movs	r1, #1
 8001554:	0018      	movs	r0, r3
 8001556:	f000 faf5 	bl	8001b44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	2100      	movs	r1, #0
 8001560:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fdcd 	bl	8001104 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800156a:	e019      	b.n	80015a0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2241      	movs	r2, #65	; 0x41
 8001570:	5c9b      	ldrb	r3, [r3, r2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b2a      	cmp	r3, #42	; 0x2a
 8001576:	d113      	bne.n	80015a0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	2128      	movs	r1, #40	; 0x28
 800157e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2222      	movs	r2, #34	; 0x22
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2102      	movs	r1, #2
 800158a:	0018      	movs	r0, r3
 800158c:	f000 fada 	bl	8001b44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fdba 	bl	8001114 <HAL_I2C_SlaveRxCpltCallback>
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	ffffbfff 	.word	0xffffbfff
 80015ac:	ffff7fff 	.word	0xffff7fff

080015b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80015c6:	200f      	movs	r0, #15
 80015c8:	183b      	adds	r3, r7, r0
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	2141      	movs	r1, #65	; 0x41
 80015ce:	5c52      	ldrb	r2, [r2, r1]
 80015d0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80015da:	183b      	adds	r3, r7, r0
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b21      	cmp	r3, #33	; 0x21
 80015e0:	d003      	beq.n	80015ea <I2C_ITSlaveCplt+0x3a>
 80015e2:	183b      	adds	r3, r7, r0
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b29      	cmp	r3, #41	; 0x29
 80015e8:	d109      	bne.n	80015fe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80015ea:	4a7d      	ldr	r2, [pc, #500]	; (80017e0 <I2C_ITSlaveCplt+0x230>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	0011      	movs	r1, r2
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 faa7 	bl	8001b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	e011      	b.n	8001622 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80015fe:	220f      	movs	r2, #15
 8001600:	18bb      	adds	r3, r7, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b22      	cmp	r3, #34	; 0x22
 8001606:	d003      	beq.n	8001610 <I2C_ITSlaveCplt+0x60>
 8001608:	18bb      	adds	r3, r7, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b2a      	cmp	r3, #42	; 0x2a
 800160e:	d108      	bne.n	8001622 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001610:	4a74      	ldr	r2, [pc, #464]	; (80017e4 <I2C_ITSlaveCplt+0x234>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0011      	movs	r1, r2
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fa94 	bl	8001b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2222      	movs	r2, #34	; 0x22
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0209      	lsls	r1, r1, #8
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	496a      	ldr	r1, [pc, #424]	; (80017e8 <I2C_ITSlaveCplt+0x238>)
 8001640:	400a      	ands	r2, r1
 8001642:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fa3b 	bl	8001ac2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	0b9b      	lsrs	r3, r3, #14
 8001650:	001a      	movs	r2, r3
 8001652:	2301      	movs	r3, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d013      	beq.n	8001680 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4962      	ldr	r1, [pc, #392]	; (80017ec <I2C_ITSlaveCplt+0x23c>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800167e:	e018      	b.n	80016b2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	0bdb      	lsrs	r3, r3, #15
 8001684:	001a      	movs	r2, r3
 8001686:	2301      	movs	r3, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d012      	beq.n	80016b2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4956      	ldr	r1, [pc, #344]	; (80017f0 <I2C_ITSlaveCplt+0x240>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	001a      	movs	r2, r3
 80016b8:	2301      	movs	r3, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	d020      	beq.n	8001700 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2204      	movs	r2, #4
 80016c2:	4393      	bics	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	2204      	movs	r2, #4
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2242      	movs	r2, #66	; 0x42
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f000 f8b9 	bl	80018ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2241      	movs	r2, #65	; 0x41
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b28      	cmp	r3, #40	; 0x28
 8001744:	d147      	bne.n	80017d6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f853 	bl	80017f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001752:	e040      	b.n	80017d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <I2C_ITSlaveCplt+0x244>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d016      	beq.n	800178c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff febf 	bl	80014e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <I2C_ITSlaveCplt+0x244>)
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2120      	movs	r1, #32
 8001772:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	2100      	movs	r1, #0
 8001780:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fcdd 	bl	8001144 <HAL_I2C_ListenCpltCallback>
}
 800178a:	e024      	b.n	80017d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2241      	movs	r2, #65	; 0x41
 8001790:	5c9b      	ldrb	r3, [r3, r2]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b22      	cmp	r3, #34	; 0x22
 8001796:	d10f      	bne.n	80017b8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2241      	movs	r2, #65	; 0x41
 800179c:	2120      	movs	r1, #32
 800179e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	2100      	movs	r1, #0
 80017ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff fcaf 	bl	8001114 <HAL_I2C_SlaveRxCpltCallback>
}
 80017b6:	e00e      	b.n	80017d6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2241      	movs	r2, #65	; 0x41
 80017bc:	2120      	movs	r1, #32
 80017be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fc97 	bl	8001104 <HAL_I2C_SlaveTxCpltCallback>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b006      	add	sp, #24
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	00008001 	.word	0x00008001
 80017e4:	00008002 	.word	0x00008002
 80017e8:	fe00e800 	.word	0xfe00e800
 80017ec:	ffffbfff 	.word	0xffffbfff
 80017f0:	ffff7fff 	.word	0xffff7fff
 80017f4:	ffff0000 	.word	0xffff0000

080017f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <I2C_ITListenCplt+0xac>)
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2241      	movs	r2, #65	; 0x41
 8001812:	2120      	movs	r1, #32
 8001814:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2242      	movs	r2, #66	; 0x42
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	001a      	movs	r2, r3
 800182a:	2301      	movs	r3, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d022      	beq.n	8001876 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d012      	beq.n	8001876 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	2204      	movs	r2, #4
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <I2C_ITListenCplt+0xb0>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f000 f961 	bl	8001b44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2210      	movs	r2, #16
 8001888:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fc55 	bl	8001144 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	ffff0000 	.word	0xffff0000
 80018a8:	00008003 	.word	0x00008003

080018ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80018b6:	200f      	movs	r0, #15
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	2141      	movs	r1, #65	; 0x41
 80018be:	5c52      	ldrb	r2, [r2, r1]
 80018c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2242      	movs	r2, #66	; 0x42
 80018c6:	2100      	movs	r1, #0
 80018c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a62      	ldr	r2, [pc, #392]	; (8001a58 <I2C_ITError+0x1ac>)
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80018e2:	183b      	adds	r3, r7, r0
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b28      	cmp	r3, #40	; 0x28
 80018e8:	d007      	beq.n	80018fa <I2C_ITError+0x4e>
 80018ea:	183b      	adds	r3, r7, r0
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b29      	cmp	r3, #41	; 0x29
 80018f0:	d003      	beq.n	80018fa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80018f2:	183b      	adds	r3, r7, r0
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b2a      	cmp	r3, #42	; 0x2a
 80018f8:	d10c      	bne.n	8001914 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2103      	movs	r1, #3
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 f920 	bl	8001b44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2241      	movs	r2, #65	; 0x41
 8001908:	2128      	movs	r1, #40	; 0x28
 800190a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <I2C_ITError+0x1b0>)
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
 8001912:	e012      	b.n	800193a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <I2C_ITError+0x1b4>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0011      	movs	r1, r2
 800191a:	0018      	movs	r0, r3
 800191c:	f000 f912 	bl	8001b44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2241      	movs	r2, #65	; 0x41
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b60      	cmp	r3, #96	; 0x60
 800192a:	d003      	beq.n	8001934 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2241      	movs	r2, #65	; 0x41
 8001930:	2120      	movs	r1, #32
 8001932:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03b      	beq.n	80019c0 <I2C_ITError+0x114>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b11      	cmp	r3, #17
 800194c:	d002      	beq.n	8001954 <I2C_ITError+0xa8>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2b21      	cmp	r3, #33	; 0x21
 8001952:	d135      	bne.n	80019c0 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	01db      	lsls	r3, r3, #7
 800195e:	401a      	ands	r2, r3
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	01db      	lsls	r3, r3, #7
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	493c      	ldr	r1, [pc, #240]	; (8001a64 <I2C_ITError+0x1b8>)
 8001974:	400a      	ands	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff f921 	bl	8000bc4 <HAL_DMA_GetState>
 8001982:	0003      	movs	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d016      	beq.n	80019b6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	4a36      	ldr	r2, [pc, #216]	; (8001a68 <I2C_ITError+0x1bc>)
 800198e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff f8a7 	bl	8000af0 <HAL_DMA_Abort_IT>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d051      	beq.n	8001a4a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	0018      	movs	r0, r3
 80019b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80019b4:	e049      	b.n	8001a4a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 f859 	bl	8001a70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80019be:	e044      	b.n	8001a4a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03b      	beq.n	8001a40 <I2C_ITError+0x194>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b12      	cmp	r3, #18
 80019cc:	d002      	beq.n	80019d4 <I2C_ITError+0x128>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b22      	cmp	r3, #34	; 0x22
 80019d2:	d135      	bne.n	8001a40 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	401a      	ands	r2, r3
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d107      	bne.n	80019f8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	491e      	ldr	r1, [pc, #120]	; (8001a6c <I2C_ITError+0x1c0>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff f8e1 	bl	8000bc4 <HAL_DMA_GetState>
 8001a02:	0003      	movs	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d016      	beq.n	8001a36 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <I2C_ITError+0x1bc>)
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff f867 	bl	8000af0 <HAL_DMA_Abort_IT>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d013      	beq.n	8001a4e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	0018      	movs	r0, r3
 8001a32:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001a34:	e00b      	b.n	8001a4e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 f819 	bl	8001a70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001a3e:	e006      	b.n	8001a4e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f814 	bl	8001a70 <I2C_TreatErrorCallback>
  }
}
 8001a48:	e002      	b.n	8001a50 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	e000      	b.n	8001a50 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001a4e:	46c0      	nop			; (mov r8, r8)
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	ffff0000 	.word	0xffff0000
 8001a5c:	08001175 	.word	0x08001175
 8001a60:	00008003 	.word	0x00008003
 8001a64:	ffffbfff 	.word	0xffffbfff
 8001a68:	08001b07 	.word	0x08001b07
 8001a6c:	ffff7fff 	.word	0xffff7fff

08001a70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2241      	movs	r2, #65	; 0x41
 8001a7c:	5c9b      	ldrb	r3, [r3, r2]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b60      	cmp	r3, #96	; 0x60
 8001a82:	d10f      	bne.n	8001aa4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2241      	movs	r2, #65	; 0x41
 8001a88:	2120      	movs	r1, #32
 8001a8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fb61 	bl	8001164 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001aa2:	e00a      	b.n	8001aba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fb4d 	bl	8001154 <HAL_I2C_ErrorCallback>
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d103      	bne.n	8001ae0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d007      	beq.n	8001afe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	619a      	str	r2, [r3, #24]
  }
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	2200      	movs	r2, #0
 8001b22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	2200      	movs	r2, #0
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff9a 	bl	8001a70 <I2C_TreatErrorCallback>
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001b56:	1cbb      	adds	r3, r7, #2
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d010      	beq.n	8001b82 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2242      	movs	r2, #66	; 0x42
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2241      	movs	r2, #65	; 0x41
 8001b6c:	5c9b      	ldrb	r3, [r3, r2]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	001a      	movs	r2, r3
 8001b72:	2328      	movs	r3, #40	; 0x28
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b28      	cmp	r3, #40	; 0x28
 8001b78:	d003      	beq.n	8001b82 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	22b0      	movs	r2, #176	; 0xb0
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001b82:	1cbb      	adds	r3, r7, #2
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d010      	beq.n	8001bae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2244      	movs	r2, #68	; 0x44
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2241      	movs	r2, #65	; 0x41
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2328      	movs	r3, #40	; 0x28
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b28      	cmp	r3, #40	; 0x28
 8001ba4:	d003      	beq.n	8001bae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	22b0      	movs	r2, #176	; 0xb0
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	5e9b      	ldrsh	r3, [r3, r2]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da03      	bge.n	8001bc0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	22b8      	movs	r2, #184	; 0xb8
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d103      	bne.n	8001bd0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2290      	movs	r2, #144	; 0x90
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001bd0:	1cbb      	adds	r3, r7, #2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d103      	bne.n	8001be0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001be0:	1cbb      	adds	r3, r7, #2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	d103      	bne.n	8001bf0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43d9      	mvns	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	400a      	ands	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b004      	add	sp, #16
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2241      	movs	r2, #65	; 0x41
 8001c1a:	5c9b      	ldrb	r3, [r3, r2]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d138      	bne.n	8001c94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e032      	b.n	8001c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	2101      	movs	r1, #1
 8001c36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2241      	movs	r2, #65	; 0x41
 8001c3c:	2124      	movs	r1, #36	; 0x24
 8001c3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4911      	ldr	r1, [pc, #68]	; (8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2241      	movs	r2, #65	; 0x41
 8001c84:	2120      	movs	r1, #32
 8001c86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	ffffefff 	.word	0xffffefff

08001ca4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2241      	movs	r2, #65	; 0x41
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d139      	bne.n	8001d2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e033      	b.n	8001d30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	2124      	movs	r1, #36	; 0x24
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2241      	movs	r2, #65	; 0x41
 8001d1e:	2120      	movs	r1, #32
 8001d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	2100      	movs	r1, #0
 8001d28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
  }
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	fffff0ff 	.word	0xfffff0ff

08001d3c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e03d      	b.n	8001dca <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_IWDG_Init+0x98>)
 8001d54:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_IWDG_Init+0x9c>)
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6852      	ldr	r2, [r2, #4]
 8001d66:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6892      	ldr	r2, [r2, #8]
 8001d70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d72:	f7fe fdb1 	bl	80008d8 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d7a:	e00e      	b.n	8001d9a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d7c:	f7fe fdac 	bl	80008d8 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b31      	cmp	r3, #49	; 0x31
 8001d88:	d907      	bls.n	8001d9a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2207      	movs	r2, #7
 8001d92:	4013      	ands	r3, r2
 8001d94:	d001      	beq.n	8001d9a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e017      	b.n	8001dca <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2207      	movs	r2, #7
 8001da2:	4013      	ands	r3, r2
 8001da4:	d1ea      	bne.n	8001d7c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d005      	beq.n	8001dc0 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68d2      	ldr	r2, [r2, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	e003      	b.n	8001dc8 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_IWDG_Init+0xa0>)
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	0000cccc 	.word	0x0000cccc
 8001dd8:	00005555 	.word	0x00005555
 8001ddc:	0000aaaa 	.word	0x0000aaaa

08001de0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <HAL_IWDG_Refresh+0x1c>)
 8001dee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	0000aaaa 	.word	0x0000aaaa

08001e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d11f      	bne.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	0013      	movs	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	189b      	adds	r3, r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4912      	ldr	r1, [pc, #72]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7fe f964 	bl	8000100 <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3e:	e008      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e001      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e009      	b.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d0ed      	beq.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b004      	add	sp, #16
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40007000 	.word	0x40007000
 8001e74:	fffff9ff 	.word	0xfffff9ff
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	000f4240 	.word	0x000f4240

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e2f3      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCC_OscConfig+0x1e>
 8001e9c:	e07c      	b.n	8001f98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9e:	4bc3      	ldr	r3, [pc, #780]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2238      	movs	r2, #56	; 0x38
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea8:	4bc0      	ldr	r3, [pc, #768]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2203      	movs	r2, #3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3e>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4bb9      	ldr	r3, [pc, #740]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d062      	beq.n	8001f96 <HAL_RCC_OscConfig+0x116>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d15e      	bne.n	8001f96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e2ce      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x78>
 8001ee8:	4bb0      	ldr	r3, [pc, #704]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4baf      	ldr	r3, [pc, #700]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0249      	lsls	r1, r1, #9
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e020      	b.n	8001f3a <HAL_RCC_OscConfig+0xba>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	23a0      	movs	r3, #160	; 0xa0
 8001efe:	02db      	lsls	r3, r3, #11
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10e      	bne.n	8001f22 <HAL_RCC_OscConfig+0xa2>
 8001f04:	4ba9      	ldr	r3, [pc, #676]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4ba8      	ldr	r3, [pc, #672]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	02c9      	lsls	r1, r1, #11
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	4ba6      	ldr	r3, [pc, #664]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4ba5      	ldr	r3, [pc, #660]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0249      	lsls	r1, r1, #9
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0xba>
 8001f22:	4ba2      	ldr	r3, [pc, #648]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4ba1      	ldr	r3, [pc, #644]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f28:	49a1      	ldr	r1, [pc, #644]	; (80021b0 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	4b9f      	ldr	r3, [pc, #636]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b9e      	ldr	r3, [pc, #632]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f34:	499f      	ldr	r1, [pc, #636]	; (80021b4 <HAL_RCC_OscConfig+0x334>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d014      	beq.n	8001f6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fcc9 	bl	80008d8 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fcc4 	bl	80008d8 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e28d      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5e:	4b93      	ldr	r3, [pc, #588]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xcc>
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fcb4 	bl	80008d8 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f76:	f7fe fcaf 	bl	80008d8 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b64      	cmp	r3, #100	; 0x64
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e278      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f88:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	029b      	lsls	r3, r3, #10
 8001f90:	4013      	ands	r3, r2
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0xf6>
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d100      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x124>
 8001fa2:	e099      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2238      	movs	r2, #56	; 0x38
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fae:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x144>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d002      	beq.n	8001fca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d135      	bne.n	8002036 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x162>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e24b      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a74      	ldr	r2, [pc, #464]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	021a      	lsls	r2, r3, #8
 8001ff2:	4b6e      	ldr	r3, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d112      	bne.n	8002024 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ffe:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x33c>)
 8002004:	4013      	ands	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002012:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0adb      	lsrs	r3, r3, #11
 8002018:	2207      	movs	r2, #7
 800201a:	4013      	ands	r3, r2
 800201c:	4a68      	ldr	r2, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x340>)
 800201e:	40da      	lsrs	r2, r3
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 8002022:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x348>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0018      	movs	r0, r3
 800202a:	f7fe fbf9 	bl	8000820 <HAL_InitTick>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d051      	beq.n	80020d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e221      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d030      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800203e:	4b5b      	ldr	r3, [pc, #364]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a5e      	ldr	r2, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x33c>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002052:	4b56      	ldr	r3, [pc, #344]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b55      	ldr	r3, [pc, #340]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0049      	lsls	r1, r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fc3a 	bl	80008d8 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe fc35 	bl	80008d8 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1fe      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4013      	ands	r3, r2
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b48      	ldr	r3, [pc, #288]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800208e:	4013      	ands	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	021a      	lsls	r2, r3, #8
 8002098:	4b44      	ldr	r3, [pc, #272]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 80020a6:	4949      	ldr	r1, [pc, #292]	; (80021cc <HAL_RCC_OscConfig+0x34c>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe fc14 	bl	80008d8 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b6:	f7fe fc0f 	bl	80008d8 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1d8      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4013      	ands	r3, r2
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x236>
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2208      	movs	r2, #8
 80020de:	4013      	ands	r3, r2
 80020e0:	d047      	beq.n	8002172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020e2:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2238      	movs	r2, #56	; 0x38
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b18      	cmp	r3, #24
 80020ec:	d10a      	bne.n	8002104 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020ee:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d03c      	beq.n	8002172 <HAL_RCC_OscConfig+0x2f2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d138      	bne.n	8002172 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e1ba      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d019      	beq.n	8002140 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800210e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fbde 	bl	80008d8 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002122:	f7fe fbd9 	bl	80008d8 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1a2      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d0f1      	beq.n	8002122 <HAL_RCC_OscConfig+0x2a2>
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002142:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fbc4 	bl	80008d8 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002156:	f7fe fbbf 	bl	80008d8 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e188      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d1f1      	bne.n	8002156 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2204      	movs	r2, #4
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x2fe>
 800217c:	e0c6      	b.n	800230c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	231f      	movs	r3, #31
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2238      	movs	r2, #56	; 0x38
 800218c:	4013      	ands	r3, r2
 800218e:	2b20      	cmp	r3, #32
 8002190:	d11e      	bne.n	80021d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_OscConfig+0x32c>)
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x31e>
 800219c:	e0b6      	b.n	800230c <HAL_RCC_OscConfig+0x48c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d000      	beq.n	80021a8 <HAL_RCC_OscConfig+0x328>
 80021a6:	e0b1      	b.n	800230c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e166      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
 80021ac:	40021000 	.word	0x40021000
 80021b0:	fffeffff 	.word	0xfffeffff
 80021b4:	fffbffff 	.word	0xfffbffff
 80021b8:	ffff80ff 	.word	0xffff80ff
 80021bc:	ffffc7ff 	.word	0xffffc7ff
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004
 80021cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d0:	4bac      	ldr	r3, [pc, #688]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80021d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x362>
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d011      	beq.n	800220a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4ba7      	ldr	r3, [pc, #668]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80021e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ea:	4ba6      	ldr	r3, [pc, #664]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0549      	lsls	r1, r1, #21
 80021f0:	430a      	orrs	r2, r1
 80021f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80021f4:	4ba3      	ldr	r3, [pc, #652]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80021f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220a:	4b9f      	ldr	r3, [pc, #636]	; (8002488 <HAL_RCC_OscConfig+0x608>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d11a      	bne.n	800224c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002216:	4b9c      	ldr	r3, [pc, #624]	; (8002488 <HAL_RCC_OscConfig+0x608>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b9b      	ldr	r3, [pc, #620]	; (8002488 <HAL_RCC_OscConfig+0x608>)
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	0049      	lsls	r1, r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002224:	f7fe fb58 	bl	80008d8 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fb53 	bl	80008d8 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e11c      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	4b91      	ldr	r3, [pc, #580]	; (8002488 <HAL_RCC_OscConfig+0x608>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4013      	ands	r3, r2
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x3e2>
 8002254:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002258:	4b8a      	ldr	r3, [pc, #552]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x404>
 800226a:	4b86      	ldr	r3, [pc, #536]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800226c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002270:	2104      	movs	r1, #4
 8002272:	430a      	orrs	r2, r1
 8002274:	65da      	str	r2, [r3, #92]	; 0x5c
 8002276:	4b83      	ldr	r3, [pc, #524]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800227c:	2101      	movs	r1, #1
 800227e:	430a      	orrs	r2, r1
 8002280:	65da      	str	r2, [r3, #92]	; 0x5c
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
 8002284:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002288:	4b7e      	ldr	r3, [pc, #504]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800228a:	2101      	movs	r1, #1
 800228c:	438a      	bics	r2, r1
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002290:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002294:	4b7b      	ldr	r3, [pc, #492]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002296:	2104      	movs	r1, #4
 8002298:	438a      	bics	r2, r1
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d014      	beq.n	80022ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7fe fb18 	bl	80008d8 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fb13 	bl	80008d8 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	4a74      	ldr	r2, [pc, #464]	; (800248c <HAL_RCC_OscConfig+0x60c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0db      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2202      	movs	r2, #2
 80022c8:	4013      	ands	r3, r2
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x42e>
 80022cc:	e013      	b.n	80022f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe fb03 	bl	80008d8 <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d6:	e009      	b.n	80022ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fafe 	bl	80008d8 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x60c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0c6      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ec:	4b65      	ldr	r3, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2202      	movs	r2, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022f6:	231f      	movs	r3, #31
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b60      	ldr	r3, [pc, #384]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002304:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002306:	4962      	ldr	r1, [pc, #392]	; (8002490 <HAL_RCC_OscConfig+0x610>)
 8002308:	400a      	ands	r2, r1
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d100      	bne.n	8002316 <HAL_RCC_OscConfig+0x496>
 8002314:	e0b0      	b.n	8002478 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002316:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2238      	movs	r2, #56	; 0x38
 800231c:	4013      	ands	r3, r2
 800231e:	2b10      	cmp	r3, #16
 8002320:	d100      	bne.n	8002324 <HAL_RCC_OscConfig+0x4a4>
 8002322:	e078      	b.n	8002416 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d153      	bne.n	80023d4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4b55      	ldr	r3, [pc, #340]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b54      	ldr	r3, [pc, #336]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002332:	4958      	ldr	r1, [pc, #352]	; (8002494 <HAL_RCC_OscConfig+0x614>)
 8002334:	400a      	ands	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe face 	bl	80008d8 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fac9 	bl	80008d8 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e092      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	049b      	lsls	r3, r3, #18
 800235c:	4013      	ands	r3, r2
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x618>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	431a      	orrs	r2, r3
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0449      	lsls	r1, r1, #17
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0549      	lsls	r1, r1, #21
 80023a6:	430a      	orrs	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fa95 	bl	80008d8 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fa90 	bl	80008d8 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e059      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	049b      	lsls	r3, r3, #18
 80023ce:	4013      	ands	r3, r2
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x534>
 80023d2:	e051      	b.n	8002478 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80023da:	492e      	ldr	r1, [pc, #184]	; (8002494 <HAL_RCC_OscConfig+0x614>)
 80023dc:	400a      	ands	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fa7a 	bl	80008d8 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe fa75 	bl	80008d8 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03e      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	049b      	lsls	r3, r3, #18
 8002404:	4013      	ands	r3, r2
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 800240e:	4923      	ldr	r1, [pc, #140]	; (800249c <HAL_RCC_OscConfig+0x61c>)
 8002410:	400a      	ands	r2, r1
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	e030      	b.n	8002478 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02b      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_RCC_OscConfig+0x604>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2203      	movs	r2, #3
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	429a      	cmp	r2, r3
 8002434:	d11e      	bne.n	8002474 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2270      	movs	r2, #112	; 0x70
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d117      	bne.n	8002474 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	23fe      	movs	r3, #254	; 0xfe
 8002448:	01db      	lsls	r3, r3, #7
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d10e      	bne.n	8002474 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	23f8      	movs	r3, #248	; 0xf8
 800245a:	039b      	lsls	r3, r3, #14
 800245c:	401a      	ands	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	0f5b      	lsrs	r3, r3, #29
 800246a:	075a      	lsls	r2, r3, #29
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b008      	add	sp, #32
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
 800248c:	00001388 	.word	0x00001388
 8002490:	efffffff 	.word	0xefffffff
 8002494:	feffffff 	.word	0xfeffffff
 8002498:	1fc1808c 	.word	0x1fc1808c
 800249c:	effefffc 	.word	0xeffefffc

080024a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0e9      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b4:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d91e      	bls.n	8002500 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2207      	movs	r2, #7
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fa00 	bl	80008d8 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe f9fb 	bl	80008d8 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a6a      	ldr	r2, [pc, #424]	; (8002694 <HAL_RCC_ClockConfig+0x1f4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0ca      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024f2:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2207      	movs	r2, #7
 80024f8:	4013      	ands	r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2202      	movs	r2, #2
 8002506:	4013      	ands	r3, r2
 8002508:	d015      	beq.n	8002536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2204      	movs	r2, #4
 8002510:	4013      	ands	r3, r2
 8002512:	d006      	beq.n	8002522 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	21e0      	movs	r1, #224	; 0xe0
 800251c:	01c9      	lsls	r1, r1, #7
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002522:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_RCC_ClockConfig+0x1fc>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d057      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	029b      	lsls	r3, r3, #10
 8002550:	4013      	ands	r3, r2
 8002552:	d12b      	bne.n	80025ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e097      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d107      	bne.n	8002570 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	049b      	lsls	r3, r3, #18
 8002568:	4013      	ands	r3, r2
 800256a:	d11f      	bne.n	80025ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e08b      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4013      	ands	r3, r2
 8002582:	d113      	bne.n	80025ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e07f      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d106      	bne.n	800259e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002590:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d108      	bne.n	80025ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e074      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e06d      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2207      	movs	r2, #7
 80025b2:	4393      	bics	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe f98a 	bl	80008d8 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c8:	e009      	b.n	80025de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ca:	f7fe f985 	bl	80008d8 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <HAL_RCC_ClockConfig+0x1f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e054      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2238      	movs	r2, #56	; 0x38
 80025e4:	401a      	ands	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1ec      	bne.n	80025ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2207      	movs	r2, #7
 80025f6:	4013      	ands	r3, r2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d21e      	bcs.n	800263c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2207      	movs	r2, #7
 8002604:	4393      	bics	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002610:	f7fe f962 	bl	80008d8 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002618:	e009      	b.n	800262e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261a:	f7fe f95d 	bl	80008d8 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_RCC_ClockConfig+0x1f4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e02c      	b.n	8002688 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2207      	movs	r2, #7
 8002634:	4013      	ands	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2204      	movs	r2, #4
 8002642:	4013      	ands	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_RCC_ClockConfig+0x200>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800265a:	f000 f829 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800265e:	0001      	movs	r1, r0
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	220f      	movs	r2, #15
 8002668:	401a      	ands	r2, r3
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_RCC_ClockConfig+0x204>)
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	58d3      	ldr	r3, [r2, r3]
 8002670:	221f      	movs	r2, #31
 8002672:	4013      	ands	r3, r2
 8002674:	000a      	movs	r2, r1
 8002676:	40da      	lsrs	r2, r3
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x208>)
 800267a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x20c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f7fe f8cd 	bl	8000820 <HAL_InitTick>
 8002686:	0003      	movs	r3, r0
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b004      	add	sp, #16
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40022000 	.word	0x40022000
 8002694:	00001388 	.word	0x00001388
 8002698:	40021000 	.word	0x40021000
 800269c:	fffff0ff 	.word	0xfffff0ff
 80026a0:	ffff8fff 	.word	0xffff8fff
 80026a4:	08002a70 	.word	0x08002a70
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2238      	movs	r2, #56	; 0x38
 80026bc:	4013      	ands	r3, r2
 80026be:	d10f      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026c0:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0adb      	lsrs	r3, r3, #11
 80026c6:	2207      	movs	r2, #7
 80026c8:	4013      	ands	r3, r2
 80026ca:	2201      	movs	r2, #1
 80026cc:	409a      	lsls	r2, r3
 80026ce:	0013      	movs	r3, r2
 80026d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026d2:	6839      	ldr	r1, [r7, #0]
 80026d4:	4835      	ldr	r0, [pc, #212]	; (80027ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80026d6:	f7fd fd13 	bl	8000100 <__udivsi3>
 80026da:	0003      	movs	r3, r0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e05d      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2238      	movs	r2, #56	; 0x38
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e054      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2238      	movs	r2, #56	; 0x38
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d138      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2203      	movs	r2, #3
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	3301      	adds	r3, #1
 8002714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d10d      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	4824      	ldr	r0, [pc, #144]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002720:	f7fd fcee 	bl	8000100 <__udivsi3>
 8002724:	0003      	movs	r3, r0
 8002726:	0019      	movs	r1, r3
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	227f      	movs	r2, #127	; 0x7f
 8002730:	4013      	ands	r3, r2
 8002732:	434b      	muls	r3, r1
 8002734:	617b      	str	r3, [r7, #20]
        break;
 8002736:	e00d      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	481c      	ldr	r0, [pc, #112]	; (80027ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800273c:	f7fd fce0 	bl	8000100 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	0019      	movs	r1, r3
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	227f      	movs	r2, #127	; 0x7f
 800274c:	4013      	ands	r3, r2
 800274e:	434b      	muls	r3, r1
 8002750:	617b      	str	r3, [r7, #20]
        break;
 8002752:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0f5b      	lsrs	r3, r3, #29
 800275a:	2207      	movs	r2, #7
 800275c:	4013      	ands	r3, r2
 800275e:	3301      	adds	r3, #1
 8002760:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f7fd fccb 	bl	8000100 <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e015      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2238      	movs	r2, #56	; 0x38
 8002776:	4013      	ands	r3, r2
 8002778:	2b20      	cmp	r3, #32
 800277a:	d103      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e00b      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2238      	movs	r2, #56	; 0x38
 800278a:	4013      	ands	r3, r2
 800278c:	2b18      	cmp	r3, #24
 800278e:	d103      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002790:	23fa      	movs	r3, #250	; 0xfa
 8002792:	01db      	lsls	r3, r3, #7
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	e001      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800279c:	693b      	ldr	r3, [r7, #16]
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b006      	add	sp, #24
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	40021000 	.word	0x40021000
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027bc:	2313      	movs	r3, #19
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c4:	2312      	movs	r3, #18
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	d100      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027d8:	e0a3      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2011      	movs	r0, #17
 80027dc:	183b      	adds	r3, r7, r0
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	055b      	lsls	r3, r3, #21
 80027ea:	4013      	ands	r3, r2
 80027ec:	d110      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f2:	4b7b      	ldr	r3, [pc, #492]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0549      	lsls	r1, r1, #21
 80027f8:	430a      	orrs	r2, r1
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80027fc:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	055b      	lsls	r3, r3, #21
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280a:	183b      	adds	r3, r7, r0
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	0049      	lsls	r1, r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281e:	f7fe f85b 	bl	80008d8 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002826:	e00b      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe f856 	bl	80008d8 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d904      	bls.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002836:	2313      	movs	r3, #19
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2203      	movs	r2, #3
 800283c:	701a      	strb	r2, [r3, #0]
        break;
 800283e:	e005      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002840:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4013      	ands	r3, r2
 800284a:	d0ed      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800284c:	2313      	movs	r3, #19
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d154      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002856:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285a:	23c0      	movs	r3, #192	; 0xc0
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4013      	ands	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d019      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	429a      	cmp	r2, r3
 8002870:	d014      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002872:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002878:	4013      	ands	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800287c:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800287e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	0249      	lsls	r1, r1, #9
 8002886:	430a      	orrs	r2, r1
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800288a:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800288c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288e:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002890:	4956      	ldr	r1, [pc, #344]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002892:	400a      	ands	r2, r1
 8002894:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002896:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2201      	movs	r2, #1
 80028a0:	4013      	ands	r3, r2
 80028a2:	d016      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe f818 	bl	80008d8 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	e00c      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe f813 	bl	80008d8 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	4a4d      	ldr	r2, [pc, #308]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d904      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80028be:	2313      	movs	r3, #19
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2203      	movs	r2, #3
 80028c4:	701a      	strb	r2, [r3, #0]
            break;
 80028c6:	e004      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c8:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	d0ed      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028d2:	2313      	movs	r3, #19
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028dc:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f0:	e00c      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f2:	2312      	movs	r3, #18
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2213      	movs	r2, #19
 80028f8:	18ba      	adds	r2, r7, r2
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e005      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	2312      	movs	r3, #18
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2213      	movs	r2, #19
 8002906:	18ba      	adds	r2, r7, r2
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800290c:	2311      	movs	r3, #17
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800291a:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800291e:	400a      	ands	r2, r1
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	2203      	movs	r2, #3
 8002932:	4393      	bics	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293c:	430a      	orrs	r2, r1
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2220      	movs	r2, #32
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800295a:	430a      	orrs	r2, r1
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	01db      	lsls	r3, r3, #7
 8002966:	4013      	ands	r3, r2
 8002968:	d015      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	0899      	lsrs	r1, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002978:	430a      	orrs	r2, r1
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	05db      	lsls	r3, r3, #23
 8002984:	429a      	cmp	r2, r3
 8002986:	d106      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	0249      	lsls	r1, r1, #9
 8002992:	430a      	orrs	r2, r1
 8002994:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	4013      	ands	r3, r2
 80029a0:	d016      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	01db      	lsls	r3, r3, #7
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	0249      	lsls	r1, r1, #9
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029d0:	2312      	movs	r3, #18
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b006      	add	sp, #24
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	fffffcff 	.word	0xfffffcff
 80029ec:	fffeffff 	.word	0xfffeffff
 80029f0:	00001388 	.word	0x00001388
 80029f4:	efffffff 	.word	0xefffffff
 80029f8:	ffffcfff 	.word	0xffffcfff
 80029fc:	ffff3fff 	.word	0xffff3fff

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	2600      	movs	r6, #0
 8002a04:	4d0c      	ldr	r5, [pc, #48]	; (8002a38 <__libc_init_array+0x38>)
 8002a06:	4c0d      	ldr	r4, [pc, #52]	; (8002a3c <__libc_init_array+0x3c>)
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	42a6      	cmp	r6, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	2600      	movs	r6, #0
 8002a12:	f000 f821 	bl	8002a58 <_init>
 8002a16:	4d0a      	ldr	r5, [pc, #40]	; (8002a40 <__libc_init_array+0x40>)
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <__libc_init_array+0x44>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	42a6      	cmp	r6, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	00b3      	lsls	r3, r6, #2
 8002a26:	58eb      	ldr	r3, [r5, r3]
 8002a28:	4798      	blx	r3
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	00b3      	lsls	r3, r6, #2
 8002a30:	58eb      	ldr	r3, [r5, r3]
 8002a32:	4798      	blx	r3
 8002a34:	3601      	adds	r6, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08002ab0 	.word	0x08002ab0
 8002a3c:	08002ab0 	.word	0x08002ab0
 8002a40:	08002ab0 	.word	0x08002ab0
 8002a44:	08002ab4 	.word	0x08002ab4

08002a48 <memset>:
 8002a48:	0003      	movs	r3, r0
 8002a4a:	1882      	adds	r2, r0, r2
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d100      	bne.n	8002a52 <memset+0xa>
 8002a50:	4770      	bx	lr
 8002a52:	7019      	strb	r1, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	e7f9      	b.n	8002a4c <memset+0x4>

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr
